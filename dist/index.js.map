{"version":3,"file":"index.js","sources":["../src/components/MButton/MButton.vue","../src/components/MLink/MLink.vue","../src/components/MInput/index.vue","../src/components/MBadge/index.vue","../src/components/MInputNumber/index.vue","../src/components/MDropdown/index.vue","../src/components/MDropdown/MDropdownMenu.vue","../src/components/MDropdown/MDropdownMenuItem.vue","../src/components/MCard/index.vue","../src/components/MCollapse/MCollapse.vue"],"sourcesContent":["<template>\n  <button\n    class=\"m-button\"\n    type=\"button\"\n    :disabled=\"disabled\"\n    :class=\"[\n      size,\n      getClassByType,\n      {\n        round: round,\n        'is-plain': plain,\n        disabled: disabled\n      }\n    ]\"\n  >\n    <slot />\n  </button>\n</template>\n\n<script setup lang=\"ts\">\nimport type { IButtonProps, IButtonSlots } from '@/components/MButton/Type';\nimport { computed } from 'vue';\n\nconst props = withDefaults(defineProps<IButtonProps>(), {\n  type: 'default',\n  size: 'default'\n});\n\ndefineSlots<IButtonSlots>();\n\nconst getClassByType = computed<string>(() => `m-button__${props.type}`);\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'src/assets/scss/_mixins';\n.m-button {\n  padding: 8px 16px;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: all 100ms;\n  &.round {\n    border-radius: 20px;\n  }\n  &.disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n  &__default {\n    @include themeBtn(default);\n    &.is-plain {\n      @include themePlainBtn(default);\n    }\n  }\n  &__primary {\n    @include themeBtn(primary);\n    &.is-plain {\n      @include themePlainBtn(primary);\n    }\n  }\n  &__success {\n    @include themeBtn(success);\n    &.is-plain {\n      @include themePlainBtn(success);\n    }\n  }\n  &__info {\n    @include themeBtn(info);\n    &.is-plain {\n      @include themePlainBtn(info);\n    }\n  }\n  &__warning {\n    @include themeBtn(warning);\n    &.is-plain {\n      @include themePlainBtn(warning);\n    }\n  }\n  &__danger {\n    @include themeBtn(danger);\n    &.is-plain {\n      @include themePlainBtn(danger);\n    }\n  }\n}\n</style>\n","<template>\n  <a\n    v-if=\"!disabled\"\n    class=\"m-link\"\n    :class=\"[\n      {\n        'm-link__disabled': disabled,\n        'm-link__underline': underline\n      },\n      type\n    ]\"\n    :href=\"!disabled ? href : ''\"\n    :target=\"target\"\n  >\n    <slot />\n  </a>\n  <span\n    v-else\n    class=\"m-link\"\n    :class=\"[\n      {\n        'm-link__disabled': disabled,\n        'm-link__underline': underline\n      },\n      type\n    ]\"\n  >\n    <slot />\n  </span>\n</template>\n\n<script lang=\"ts\">\nexport default {\n  name: 'MLink'\n};\n</script>\n\n<script setup lang=\"ts\">\nimport type { ILinkProps } from '@/components/MLink/Type';\nwithDefaults(defineProps<ILinkProps>(), {\n  target: '_self',\n  type: 'default'\n});\n</script>\n\n<style scoped lang=\"scss\">\n.m-link {\n  text-decoration: none;\n  &__underline {\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n  &__disabled {\n    opacity: 0.4;\n    cursor: not-allowed;\n  }\n  &.default {\n    color: rgb(var(--m-text-color));\n    &:hover {\n      color: rgb(var(--m-primary));\n    }\n  }\n  &.primary {\n    color: rgb(var(--m-primary));\n    &:hover {\n      color: rgb(var(--m-primary-600));\n    }\n  }\n  &.success {\n    color: rgb(var(--m-success));\n    &:hover {\n      color: rgb(var(--m-success-600));\n    }\n  }\n  &.info {\n    color: rgb(var(--m-info));\n    &:hover {\n      color: rgb(var(--m-info-600));\n    }\n  }\n  &.warning {\n    color: rgb(var(--m-warning));\n    &:hover {\n      color: rgb(var(--m-warning-600));\n    }\n  }\n  &.danger {\n    color: rgb(var(--m-danger));\n    &:hover {\n      color: rgb(var(--m-danger-600));\n    }\n  }\n}\n</style>\n","<template>\n  <div\n    class=\"m-input\"\n    :class=\"{\n      'is-focus': isFocus,\n      disabled: disabled\n    }\"\n  >\n    <input\n      v-model=\"value\"\n      :type=\"type\"\n      :disabled=\"disabled\"\n      :placeholder=\"placeholder\"\n      :autocomplete=\"autocomplete\"\n      @focus=\"isFocus = true\"\n      @blur=\"isFocus = false\"\n      @input=\"maxLength\"\n    />\n    <button\n      v-if=\"clearable && !!value\"\n      class=\"m-input__clear\"\n      @click=\"value = ''\"\n    >\n      clear\n    </button>\n  </div>\n</template>\n\n<script lang=\"ts\">\nexport default {\n  name: 'MInput'\n}\n</script>\n\n<script setup lang=\"ts\">\nimport type { MInputEmits, MInputProps } from '@/components/MInput/Type'\nimport { computed, ref } from 'vue'\n\nconst isFocus = ref<boolean>(false)\n\nfunction maxLength(e: Event) {\n  const input = <HTMLInputElement>e.target\n  if (props.maxLength && input?.value.length > props.maxLength) {\n    value.value = value.value.substring(0, props.maxLength)\n  }\n}\nconst value = computed({\n  get() {\n    return props.modelValue\n  },\n  set(value) {\n    emits('update:modelValue', value)\n  }\n})\n\nconst props = withDefaults(defineProps<MInputProps>(), {\n  type: 'text',\n  modelValue: '',\n  autocomplete: ''\n})\nconst emits = defineEmits<MInputEmits>()\n</script>\n\n<style scoped lang=\"scss\">\n.m-input {\n  border-radius: 4px;\n  border: 1px solid rgb(var(--m-text-color));\n  padding: 0 5px;\n  width: 240px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  &.disabled {\n    background: rgb(var(--m-gray-color));\n    border-color: rgb(var(--m-border-color));\n    cursor: not-allowed;\n    input {\n      cursor: not-allowed;\n    }\n  }\n  &.is-focus {\n    border: 1px solid rgb(var(--m-primary));\n  }\n  &__clear {\n    background: none;\n    border: none;\n    padding: 0;\n    cursor: pointer;\n  }\n  input {\n    border: none;\n    border-radius: 4px;\n    background: none;\n    flex-grow: 1;\n    height: 32px;\n    &:focus {\n      outline: none;\n    }\n  }\n}\n</style>\n","<template>\n  <div class=\"m-badge-wrap\">\n    <slot />\n    <div\n      v-if=\"!hidden\"\n      class=\"m-badge-wrap__item\"\n      :class=\"[\n        {\n          'is-dot': value === undefined || isDot\n        },\n        type\n      ]\"\n    >\n      <span v-if=\"value !== undefined && !isDot\">{{ getValue }}</span>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nexport default {\n  name: 'MBadge'\n};\n</script>\n\n<script setup lang=\"ts\">\nimport type { IBadgeProps } from '@/components/MBadge/types';\nimport { computed } from 'vue';\n\nconst getValue = computed(() => {\n  if (props.max) {\n    return Number(props.value) > props.max ? `${props.max}+` : props.value;\n  } else {\n    return props.value;\n  }\n});\n\nconst props = withDefaults(defineProps<IBadgeProps>(), {\n  type: 'primary'\n});\n</script>\n\n<style scoped lang=\"scss\">\n.m-badge-wrap {\n  position: relative;\n  width: max-content;\n  &__item {\n    position: absolute;\n    top: 0;\n    right: 0;\n    min-width: 10px;\n    min-height: 10px;\n    border-radius: 10px;\n    transform: translate(80%, -80%);\n    background: rgb(var(--m-danger));\n    padding: 0 6px;\n    color: rgb(var(--m-white));\n    border: 1px solid rgb(var(--m-white));\n    font-size: 12px;\n    &.is-dot {\n      padding: 0;\n      border-radius: 50%;\n      transform: translate(50%, -50%);\n    }\n    &.primary {\n      background: rgb(var(--m-primary));\n    }\n    &.success {\n      background: rgb(var(--m-success));\n    }\n    &.info {\n      background: rgb(var(--m-info));\n    }\n    &.warning {\n      background: rgb(var(--m-warning));\n    }\n    &.danger {\n      background: rgb(var(--m-danger));\n    }\n  }\n}\n</style>\n","<template>\n  <div class=\"m-input-number\">\n    <button\n      class=\"m-input-number__button-left\"\n      :disabled=\"isMin || disabled\"\n      @click=\"editValue('-')\"\n    >\n      -\n    </button>\n\n    <input\n      v-model=\"input\"\n      type=\"text\"\n      :disabled=\"disabled\"\n      class=\"m-input-number__input\"\n      @blur=\"validateInput\"\n    />\n\n    <button\n      class=\"m-input-number__button-right\"\n      :disabled=\"isMax || disabled\"\n      @click=\"editValue('+')\"\n    >\n      +\n    </button>\n  </div>\n</template>\n\n<script lang=\"ts\">\nexport default {\n  name: 'MInputNumber'\n};\n</script>\n\n<script setup lang=\"ts\">\nimport type { IInputNumberProps, IInputNumberEmits } from '@/components/MInputNumber/Type';\nimport { computed } from 'vue';\n\nconst input = computed({\n  get() {\n    return String(props.modelValue);\n  },\n  set(value) {\n    emits('update:modelValue', Number(value));\n  }\n});\n\nconst props = withDefaults(defineProps<IInputNumberProps>(), {\n  steps: 1,\n  disabled: false,\n  modelValue: 0,\n  max: 999999,\n  min: -999999\n});\n\nconst emits = defineEmits<IInputNumberEmits>();\n\nfunction editValue(symbol: string) {\n  if (symbol === '+') {\n    props.max !== parseInt(input.value, 10)\n      ? updateValue(parseInt(input.value, 10) + props.steps)\n      : '';\n  } else if (symbol === '-') {\n    props.min !== parseInt(input.value, 10)\n      ? updateValue(parseInt(input.value, 10) - props.steps)\n      : '';\n  }\n}\n\nfunction updateValue(value: number): void {\n  if (value || value === 0) {\n    input.value = value + '';\n  }\n  emits('update:modelValue', value);\n}\n\nfunction validateInput(): void {\n  input.value = input.value.replace(/[^0-9]/gi, '');\n  if (parseInt(input.value, 10) >= props.max) {\n    input.value = props.max + '';\n  }\n  if (parseInt(input.value, 10) <= props.min) {\n    input.value = props.min + '';\n  }\n}\n\nconst isMin = computed((): boolean => {\n  return parseInt(input.value, 10) === props.min;\n});\n\nconst isMax = computed((): boolean => {\n  return parseInt(input.value, 10) === props.max;\n});\n</script>\n\n<style scoped lang=\"scss\">\n.m-input-number {\n  border: 1px solid rgb(var(--m-gray-color));\n  border-radius: 4px;\n  width: max-content;\n  &:hover {\n    border-color: rgb(var(--m-primary-400));\n  }\n  &__button-left {\n    padding: 12px 16px;\n    border-left: 1px solid rgb(var(--m-border-color));\n    border-bottom: 1px solid rgb(var(--m-border-color));\n    border-top: 1px solid rgb(var(--m-border-color));\n    border-right: none;\n    border-radius: 4px;\n    &:hover {\n      color: rgb(var(--m-primary-400));\n    }\n  }\n  &__button-right {\n    padding: 12px 16px;\n    border-right: 1px solid rgb(var(--m-border-color));\n    border-bottom: 1px solid rgb(var(--m-border-color));\n    border-top: 1px solid rgb(var(--m-border-color));\n    border-left: none;\n    border-radius: 4px;\n    &:hover {\n      color: rgb(var(--m-primary-400));\n    }\n  }\n  &__input {\n    border: none;\n    text-align: center;\n    width: 56px;\n    height: 100%;\n  }\n}\n</style>\n","<template>\n  <div class=\"m-dropdown\">\n    <slot :props=\"activatorPropsClick\" />\n    <div\n      v-if=\"isOpenDropdown\"\n      class=\"m-dropdown__menu\"\n      :style=\"`max-height: ${maxHeight || 'auto'}`\"\n    >\n      <slot name=\"menu\" />\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nexport default {\n  name: 'MDropdown'\n};\n</script>\n\n<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport type { IDropdownProps } from '@/components/MDropdown/types';\n\ndefineProps<IDropdownProps>();\n\nconst isOpenDropdown = ref(false);\n\nfunction toggleMenu(): void {\n  isOpenDropdown.value = !isOpenDropdown.value;\n}\n\ndefineExpose({\n  toggleMenu\n});\n\nconst activatorPropsClick = {\n  onClick: toggleMenu\n};\n</script>\n\n<style scoped lang=\"scss\">\n.m-dropdown {\n  position: relative;\n  &__menu {\n    position: absolute;\n    top: 100%;\n    left: 0;\n  }\n}\n</style>\n","<template>\n  <div class=\"m-dropdown-menu\">\n    <slot />\n  </div>\n</template>\n\n<script lang=\"ts\">\nexport default {\n  name: 'MDropdownMenu'\n};\n</script>\n\n<style scoped lang=\"scss\">\n.m-dropdown-menu {\n  box-shadow:\n    0 4px 8px 0 rgba(0, 0, 0, 0.2),\n    0 6px 20px 0 rgba(0, 0, 0, 0.19);\n  padding: 5px 0;\n}\n</style>\n","<template>\n  <div\n    class=\"m-dropdown-menu-item\"\n    :class=\"{\n      disabled: disabled\n    }\"\n  >\n    <slot />\n  </div>\n</template>\n\n<script lang=\"ts\">\nexport default {\n  name: 'MDropdownMenuItem'\n};\n</script>\n\n<script setup lang=\"ts\">\nimport type { IDropdownMenuItemProps } from '@/components/MDropdown/types';\n\ndefineProps<IDropdownMenuItemProps>();\n</script>\n\n<style scoped lang=\"scss\">\n.m-dropdown-menu-item {\n  padding: 5px 16px;\n  cursor: pointer;\n  &:hover:not(.disabled) {\n    background: rgb(var(--m-primary-light));\n    color: rgb(var(--m-primary));\n  }\n  &.disabled {\n    color: rgb(var(--m-border-color));\n    cursor: not-allowed;\n  }\n}\n</style>\n","<template>\n  <div class=\"m-card\">\n    <div\n      v-if=\"$slots.header || header\"\n      class=\"m-card__header\"\n    >\n      <slot name=\"header\">\n        <span v-if=\"header\">{{ header }}</span>\n      </slot>\n    </div>\n    <div class=\"m-card__body\">\n      <slot />\n    </div>\n    <div\n      v-if=\"$slots.footer || footer\"\n      class=\"m-card__footer\"\n    >\n      <slot name=\"footer\">\n        <span v-if=\"footer\">{{ footer }}</span>\n      </slot>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nexport default {\n  name: 'MCard'\n};\n</script>\n\n<script setup lang=\"ts\">\nimport type { ICardProps, ICardSlots } from '@/components/MCard/types'\n\ndefineProps<ICardProps>();\ndefineSlots<ICardSlots>();\n</script>\n\n<style scoped lang=\"scss\">\n.m-card {\n  border-radius: 4px;\n  border: 1px solid rgb(var(--m-border-color));\n  box-shadow: 0 0 12px rgba(0, 0, 0, 0.12);\n  &__footer,\n  &__body,\n  &__header {\n    padding: 20px;\n  }\n}\n</style>\n","<template>\n  <div class=\"m-collapse\">\n    <div\n      :class=\"{\n        'm-activator': isExpand\n      }\"\n    >\n      <slot\n        name=\"default\"\n        v-bind=\"activatorProps\"\n      />\n    </div>\n\n    <Teleport\n      v-if=\"isMounted\"\n      :disabled=\"!toTeleport\"\n      :to=\"toTeleport\"\n    >\n      <slot\n        v-if=\"isExpand\"\n        name=\"expand\"\n      />\n    </Teleport>\n  </div>\n</template>\n\n<script lang=\"ts\">\nexport default {\n  name: 'MCollapse'\n};\n</script>\n\n<script setup lang=\"ts\">\nimport { onMounted, reactive, ref } from 'vue';\nimport type { ICollapseEmits, ICollapseProps, ICollapseSlots } from '@/components/MCollapse/Type';\n\nconst props = defineProps<ICollapseProps>();\nconst emits = defineEmits<ICollapseEmits>();\n\nconst isExpand = ref<boolean>(false);\nconst isMounted = ref<boolean>(false);\n\nonMounted(() => {\n  isExpand.value = props.modelValue;\n  isMounted.value = true;\n});\n\nconst toggleCollapse = (): void => {\n  isExpand.value = !isExpand.value;\n  emits('update:modelValue', isExpand.value);\n};\n\ndefineSlots<ICollapseSlots>();\ndefineExpose({\n  toggleCollapse\n});\n\nconst activatorProps = reactive({\n  toggleCollapse,\n  isExpand\n});\n</script>\n\n<style scoped lang=\"scss\">\n.m-collapse {\n  border-top: 1px solid rgb(var(--m-border-color));\n  border-bottom: 1px solid rgb(var(--m-border-color));\n  padding: 10px 0;\n}\n.m-activator {\n  margin-bottom: 8px;\n}\n</style>\n"],"names":["props","__props","getClassByType","computed","__default__","isFocus","ref","maxLength","e","input","value","emits","__emit","getValue","editValue","symbol","updateValue","validateInput","isMin","isMax","isOpenDropdown","toggleMenu","__expose","activatorPropsClick","_sfc_main$3","_sfc_render","_ctx","_cache","$props","$setup","$data","$options","isExpand","isMounted","onMounted","toggleCollapse","activatorProps","reactive"],"mappings":"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"}